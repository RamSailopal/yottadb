---
# tasks file for yottadb
- name: Get the chip architecture
  command: uname -a
  register: chip_arch
  changed_when: chip_arch.stdout is not search("")
- name: Print message about not being able to run on 64 bit architecture
  debug:
    msg="The role can only run on 64 bit systems"
  when: chip_arch.stdout is not search("x86_64")
- name: Quit if the architecture is 64 bit
  meta: end_play
  when: chip_arch.stdout is not search("x86_64")
- name: Make sure that wget, gcc and make is installed
  zypper:
   name: "{{ item }}"
   state: "present"
  loop:
    - wget
    - gcc
    - make
  when: ansible_distribution is search("SUSE")
- name: Make sure wget, gcc and make is installed
  yum:
   name: "{{ item }}"
   state: "present"
  loop:
    - wget
    - gcc
    - make
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
- name: Make sure wget, gcc and make is installed
  apt:
   name: "{{ item }}"
   state: "present"
  loop:
    - wget
    - gcc
    - make
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
- name: Get in the yottdb install script
  get_url:
    url: https://gitlab.com/YottaDB/DB/YDB/raw/master/sr_unix/ydbinstall.sh
    dest: /tmp/ydbinstall.sh
    mode: '0740'
- name: Run the install
  command: '/tmp/ydbinstall.sh --installdir {{ instdir }} {{ "--force-install" if "Yes" in force else "" }} {{ "--gtm" if "Yes" in gtm else "" }} --group {{ group }} --user {{ user }} {{ "--zlib" if "Yes" in zlib else "" }} {{ "--posix" if "Yes" in posix else "" }}'
  register: outpt
  changed_when: outpt.stdout is not search("")
- name: Set the executable links
  file:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    state: link
  with_items:
    - { src: "{{ instdir }}/ydb", dest: "/usr/local/bin/ydb" }
    - { src: "{{ instdir }}/yottadb", dest: "/usr/local/bin/yottadb" }
  when: gtm == "No"
- name: Set the executable links
  file:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    state: link
  with_items:
    - { src: "{{ instdir }}/gtm", dest: "/usr/local/bin/gtm" }
  when: gtm == "Yes"
- name: Test the install by setting a global
  command: bash -c 'ydb <<< "S ^TEST(\"TEST\")=\"TEST\""'
  when: gtm == "No"
- name: Now verify the output by displaying the global
  command: bash -c 'ydb <<< "W ^TEST(\"TEST\")"'
  register: outpt1
  when: gtm == "No"
- name: Test the install by setting a global
  command: bash -c 'gtm <<< "S ^TEST(\"TEST\")=\"TEST\""'
  when: gtm == "Yes"
- name: Now verify the output by displaying the global
  command: bash -c 'gtm <<< "W ^TEST(\"TEST\")"'
  register: outpt1
  when: gtm == "Yes"
- name: Print whether the install has gone through or not
  debug: msg="Yottadb has installed corrrectly"
  when: outpt1.stdout is search("TEST")
- name: Print whether the install has gone through or not
  debug: msg="Yottadb has NOT been installed correcty"
  when: outpt1.stdout is not search("TEST")
